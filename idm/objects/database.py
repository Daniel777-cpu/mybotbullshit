# —Ç—É—Ç (–¥–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç—É—Ç) –µ—Å—Ç—å –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—ã–ª–µ–π,
# –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –Ω–∏—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import os
from os.path import join as pjoin
import json
from typing import List

from wtflog import warden

logger = warden.get_boy('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')

get_dir = os.path.dirname
path = pjoin(get_dir(get_dir(get_dir(__file__))), 'database')


db_gen: "DB_general"


def read(name: str) -> dict:
    '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
    logger.debug(f'–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª "{name}"')
    with open(pjoin(path, f'{name}.json'), "r", encoding="utf-8") as file:
        return json.loads(file.read())


gen_raw = {
    "owner_id": 0,
    "host": "",
    "installed": False,
    "dc_auth": False
}


def create_general():
    try:
        with open(pjoin(path, 'general.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(gen_raw, ensure_ascii=False, indent=4))
    except FileNotFoundError:
        os.mkdir(path)
        create_general()


try:
    read('general')
except FileNotFoundError:
    create_general()


class DB_defaults:

    settings: dict = {
        "silent_deleting": False
    }

    lp_settings: dict = {
        "ignored_users": [],
        "prefixes": [".–ª", "!–ª"],
        "binds": {},
        "key": ""
    }

    responses: dict = {
        "del_self": "&#13;",
        "del_process": "–£–î–ê–õ–Ø–Æ –©–ê–©–ê–© –ü–ê–î–ê–ñ–ñ–´",
        "del_success": "‚úÖ *–ü—Ä–æ–∏–∑–æ—à–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ*",
        "del_err_924": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? ü§î",
        "del_err_vk": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –û—à–∏–±–∫–∞ VK:{–æ—à–∏–±–∫–∞}",
        "del_err_not_found": "‚ùó –ù–µ –Ω–∞—à–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü§∑‚Äç‚ôÄ",
        "del_err_unknown": "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üëÄ",
        "chat_subscribe": "–†–ê–ë–û–¢–ê–ï–¢ üëç<br>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∏–∫–∞<br>{–∏–º—è}<br>–≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏—Ä–∏—Å–∞: {–∏–¥}",
        "chat_bind": "–ß–∞—Ç '{–∏–º—è}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
        "user_ret_ban_expired": "üíö –°—Ä–æ–∫ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞} –∏—Å—Ç–µ–∫",
        "user_ret_process": "üíö –î–æ–±–∞–≤–ª—è—é {—Å—Å—ã–ª–∫–∞}",
        "user_ret_success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É",
        "user_ret_err_no_access": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {—Å—Å—ã–ª–∫–∞}.<br>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.<br> –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –≤ –º–æ–∏—Ö –¥—Ä—É–∑—å—è—Ö –∏–ª–∏ –æ–Ω —É–∂–µ –≤ –±–µ—Å–µ–¥–µ",
        "user_ret_err_vk": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–û—à–∏–±–∫–∞ –í–ö.<br>",
        "user_ret_err_unknown": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "to_group_success": "‚úÖ –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
        "to_group_err_forbidden": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å—É—Ç–∫–∏, –ª–∏–±–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∞—è –∑–∞–ø–∏—Å—å, –ª–∏–±–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç–µ–Ω–µ",
        "to_group_err_recs": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "to_group_err_link": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å—Å—ã–ª–∫–∏",
        "to_group_err_vk": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û—à–∏–±–∫–∞ VK:<br>{–æ—à–∏–±–∫–∞}",
        "to_group_err_unknown": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "repeat_forbidden_words": [
            "–ø–µ—Ä–µ–¥–∞—Ç—å",
            "–∫—É–ø–∏—Ç—å",
            "–ø–æ–≤—ã—Å–∏—Ç—å",
            "–∑–∞–≤–µ—â–∞–Ω–∏–µ",
            "–º–æ–¥–µ—Ä"
        ],
        "repeat_if_forbidden": "–Ø —ç—Ç–æ –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥—É.",
        "ping_duty": "{–æ—Ç–≤–µ—Ç}<br>–û—Ç–≤–µ—Ç –∑–∞ {–≤—Ä–µ–º—è}—Å–µ–∫.",
        "ping_myself": "{–æ—Ç–≤–µ—Ç} CB<br>–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è}—Å–µ–∫.<br>–í–ö –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {–ø–∏–Ω–≥–≤–∫}—Å–µ–∫.<br>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ}—Å–µ–∫.",
        "ping_lp": "{–æ—Ç–≤–µ—Ç} LP<br>–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è}—Å–µ–∫.<br>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ}—Å–µ–∫.",
        "info_duty": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IrCA Duty v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "info_myself": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IrCA Duty v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "not_in_trusted": "–Ø —Ç–µ–±–µ –Ω–µ –¥–æ–≤–µ—Ä—è—é üòë",
        "trusted_err_no_reply": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "trusted_err_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_err_not_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_add": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_rem": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_list": "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    }

    @staticmethod
    def load_user(instance: "DB" = None) -> dict:
        if not instance:
            instance = DB
        return {
            "access_token": instance.access_token,
            "me_token": instance.me_token,
            "secret": instance.secret,
            "responses": instance.responses,
            "lp_settings": instance.lp_settings,
            "settings": instance.settings,
            "trusted_users": instance.trusted_users,
            "chats": instance.chats,
            "templates": instance.templates,
            "voices": instance.voices,
            "anims": instance.anims
        }


class DB_general:
    '–ë–î —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π'
    general: dict = {}

    owner_id: int = 0
    host: str = ""
    installed: bool = False
    dc_auth: bool = False

    def __init__(self):
        logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î')
        self.general = read('general')
        self.general['dc_auth'] = self.general.get('dc_auth', False)
        self.__dict__.update(self.general)

    @staticmethod
    def update_general():
        '–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –≤ —Ñ–∞–π–ª–µ database.py'
        global db_gen
        db_gen = DB_general()

    def set_user(self, user_id: int):
        self.owner_id = user_id
        with open(pjoin(path, f'{user_id}.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(
                DB_defaults.load_user(), ensure_ascii=False, indent=4
            ))
        self.save()
        self.update_general()
        return DB()

    def save(self) -> str:
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î'
        logger.debug("–°–æ—Ö—Ä–∞–Ω—è—é –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        for key in self.general:
            self.general[key] = getattr(self, key)
        with open(pjoin(path, 'general.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(self.general, ensure_ascii=False, indent=4))
        self.update_general()
        return "ok"


class DB:
    '–ë–î –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    gen: DB_general

    access_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    me_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret: str = ""
    chats: dict = {}
    trusted_users: List[int] = []
    duty_id: int = 0
    templates: List[dict] = []
    anims: List[dict] = []
    voices: List[dict] = []
    responses = DB_defaults.responses

    settings = DB_defaults.settings
    lp_settings = DB_defaults.lp_settings

    def __init__(self):
        self.gen = db_gen
        self.duty_id = int(db_gen.owner_id)
        self.host = db_gen.host
        self.installed = db_gen.installed
        self.load_user()

    def load_user(self):
        user_db = read(str(self.duty_id))
        self.__dict__.update(user_db)

    def save(self) -> str:
        '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª'
        logger.debug("–°–æ—Ö—Ä–∞–Ω—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        with open(pjoin(path, f'{self.duty_id}.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(
                DB_defaults.load_user(self), ensure_ascii=False, indent=4
            ))
        return "ok"


def _update(data):
    data['voices'] = []
    for i, temp in enumerate(data['templates']):
        data['templates'][i]['name'] = temp['name'].lower()
        data['templates'][i]['cat'] = temp['cat'].lower()
        if temp['attachments']:
            if temp['attachments'][0].startswith('audio_message'):
                data['voices'].append(temp)
                data['templates'][i]['payload'] = None
    for temp in data['templates']:
        if temp['payload'] is None:
            data['templates'].remove(temp)
    for i, temp in enumerate(data['dyntemplates']):
        data['dyntemplates'][i]['name'] = temp['name'].lower()
    if 'dyntemplates' in data:
        data['anims'] = data.pop('dyntemplates', [])
    with open(pjoin(path, f'{db_gen.owner_id}.json'), "w", encoding="utf-8") as file:
        file.write(json.dumps(data, ensure_ascii=False, indent=4))


DB_general.update_general()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞

# —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∂—ã—Å–æ–Ω–æ–≤ –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
if db_gen.owner_id != 0:
    data = read(db_gen.owner_id)
    if 'dyntemplates' in data:
        try:
            _update(data)
        except Exception:
            pass
    if 'lp_settings' not in data:
        data['lp_settings'] = {

        }
    del(data)
