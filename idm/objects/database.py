__version__ = '1.1.0 beta (1.3.2 public)'
import os
from os import path as p
import json

from wtflog import warden

logger = warden.get_boy(__name__)

get_dir = p.dirname # p = —ç—Ç–æ os.path, –µ—Å–ª–∏ —á–µ)
path = p.join(get_dir(get_dir(get_dir(__file__))), 'database')


def read(name: str):
    '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
    logger.debug(f'–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª "{name}"')
    with open(p.join(path, f'{name}.json'), "r", encoding="utf-8") as file:
        return json.loads(file.read())



class ExcDB(Exception):
    code: int
    text: str
    def __init__(self, code):
        self.code = int(code)
        if self.code == 0:
            self.text = '–û—à–∏–±–∫–∞ –ë–î: –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ'
        elif self.code == 1:
            self.text = '–û—à–∏–±–∫–∞ –ë–î: –£–∫–∞–∑–∞–Ω–Ω—ã–π ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É'
        else: self.text = code



class DB_defaults:

    settings: dict = {
        "prefix": ".–ª ",
        "farm": {"on": False,"soft": False,"last_time": 0},
        "friends_add": False,
        "user_delete": {},
        "ignore_list": [],
        "del_requests": False,
        "online": False,
        "offline": False,
        "templates_bind": 0
        }

    lp: dict = {"unsynced_changes": {}, "installed": ""}

    warnings: dict = {"secret_fails": {"lp": {"count": 0, "last": ""}, "cb": {"count": 0,"last": ""}}}

    responses: dict = {
        "del_self": "&#13;",
        "del_process": "–£–î–ê–õ–Ø–Æ –©–ê–©–ê–© –ü–ê–î–ê–ñ–ñ–´",
        "del_success": "‚úÖ *–ü—Ä–æ–∏–∑–æ—à–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ*",
        "del_err_924": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? ü§î",
        "del_err_vk": "‚ùó –ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ. –û—à–∏–±–∫–∞ VK:{–æ—à–∏–±–∫–∞}",
        "del_err_not_found": "‚ùó –ù–µ –Ω–∞—à–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ü§∑‚Äç‚ôÄ",
        "del_err_unknown": "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üëÄ",
        "chat_subscribe": "–†–ê–ë–û–¢–ê–ï–¢ üëç<br>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∏–∫–∞<br>{–∏–º—è}<br>–≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏—Ä–∏—Å–∞: {–∏–¥}",
        "chat_bind": "–ß–∞—Ç '{–∏–º—è}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
        "user_ret_ban_expired": "üíö –°—Ä–æ–∫ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞} –∏—Å—Ç–µ–∫",
        "user_ret_process": "üíö –î–æ–±–∞–≤–ª—è—é {—Å—Å—ã–ª–∫–∞}",
        "user_ret_success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É",
        "user_ret_err_no_access": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {—Å—Å—ã–ª–∫–∞}.<br>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.<br> –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –≤ –º–æ–∏—Ö –¥—Ä—É–∑—å—è—Ö –∏–ª–∏ –æ–Ω —É–∂–µ –≤ –±–µ—Å–µ–¥–µ",
        "user_ret_err_vk": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–û—à–∏–±–∫–∞ –í–ö.<br>",
        "user_ret_err_unknown": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å—Å—ã–ª–∫–∞}.<br>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "to_group_success": "‚úÖ –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
        "to_group_err_forbidden": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å—É—Ç–∫–∏, –ª–∏–±–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∞—è –∑–∞–ø–∏—Å—å, –ª–∏–±–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç–µ–Ω–µ",
        "to_group_err_recs": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
        "to_group_err_link": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å—Å—ã–ª–∫–∏",
        "to_group_err_vk": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û—à–∏–±–∫–∞ VK:<br>{–æ—à–∏–±–∫–∞}",
        "to_group_err_unknown": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "repeat_forbidden_words": [
            "–ø–µ—Ä–µ–¥–∞—Ç—å",
            "–∫—É–ø–∏—Ç—å",
            "–ø–æ–≤—ã—Å–∏—Ç—å",
            "–∑–∞–≤–µ—â–∞–Ω–∏–µ",
            "–º–æ–¥–µ—Ä"
        ],
        "repeat_if_forbidden": "–Ø —ç—Ç–æ –ø–∏—Å–∞—Ç—å –Ω–µ –±—É–¥—É.",
        "ping_duty": "{–æ—Ç–≤–µ—Ç}<br>–û—Ç–≤–µ—Ç –∑–∞ {–≤—Ä–µ–º—è}—Å–µ–∫.",
        "ping_myself": "{–æ—Ç–≤–µ—Ç} CB<br>–ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è}—Å–µ–∫.<br>–í–ö –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {–ø–∏–Ω–≥–≤–∫}—Å–µ–∫.<br>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ}—Å–µ–∫.",
        "info_duty": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IDM v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "info_myself": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä–Ω–æ–º:<br>IDM v{–≤–µ—Ä—Å–∏—è}<br>–í–ª–∞–¥–µ–ª–µ—Ü: {–≤–ª–∞–¥–µ–ª–µ—Ü}<br>–ß–∞—Ç–æ–≤: {—á–∞—Ç—ã}<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:<br>Iris ID: {–∏–¥}<br>–ò–º—è: {–∏–º—è}",
        "not_in_trusted": "–Ø —Ç–µ–±–µ –Ω–µ –¥–æ–≤–µ—Ä—è—é üòë",
        "trusted_err_no_reply": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "trusted_err_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_err_not_in_tr": "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_add": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_success_rem": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å—Å—ã–ª–∫–∞} —É–¥–∞–ª–µ–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
        "trusted_list": "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    }

    def load_user(self, instance = 0) -> dict:
        if not instance:
            instance = DB
        return {
            "access_token": instance.access_token,
            "me_token": instance.me_token,
            "lp_token": instance.lp_token,
            "secret": instance.secret,
            "responses": instance.responses,
            "informed": instance.informed,
            "lp": instance.lp,
            "settings": instance.settings,
            "trusted_users": instance.trusted_users,
            "chats": instance.chats,
            "templates": instance.templates,
            "dyntemplates":instance.dyntemplates
        }



class DB_general:
    '–ë–î —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π'
    path: str = path
    general: dict = {}
    owner_id: int = 0
    users: list = []
    host: str = ""
    installed: bool = False
    v_last: str = __version__
    mode: str = ""
    warnings: dict =  DB_defaults.warnings
    vk_app_id: int = 0
    vk_app_secret: str = ""
    group_id = -195759899

    def __init__(self):
        logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î')
        self.general = read('general')
        self.users = self.general['users']
        self.owner_id = self.general['owner_id']
        self.host = self.general['host']
        self.installed = self.general['installed']
        self.v_last = self.general['v_last']
        self.mode = self.general['mode']
        self.warnings =  self.general['warnings']
        self.vk_app_id = self.general['vk_app_id']
        self.vk_app_secret = self.general['vk_app_secret']

    @property
    def update_general(self):
        '–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –≤ —Ñ–∞–π–ª–µ database.py'
        global db_gen
        db_gen = DB_general()

    def add_user(self, user_id: int, owner: bool = False):
        if user_id in self.users: raise ExcDB(1)
        self.users.append(user_id)
        if owner: self.owner_id = user_id
        with open(p.join(path, f'{user_id}.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(DB_defaults().load_user(), ensure_ascii=False, indent=4))
        self.save()
        self.update_general
        return DB(user_id)


    def save(self) -> str:
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î'
        logger.debug("–°–æ—Ö—Ä–∞–Ω—è—é –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        self.general['users'] = self.users
        self.general['host'] = self.host
        self.general['installed'] = self.installed
        self.general['v_last'] = self.v_last
        self.general['mode'] = self.mode
        self.general['warnings'] = self.warnings
        self.general['vk_app_id'] = self.vk_app_id
        self.general['vk_app_secret'] = self.vk_app_secret
        self.general['owner_id'] = self.owner_id
        with open(p.join(path, 'general.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(self.general, ensure_ascii=False, indent=4))
        self.update_general
        return "ok"


class DB:
    '–ë–î –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    path: str = path
    full_db: dict = {}
    gen: DB_general

    access_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    me_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    lp_token: str = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret: str = ""
    chats: dict = {}
    trusted_users: list = []
    duty_id: int = 0
    templates: list = []
    dyntemplates: list = []
    informed: bool = False
    responses: dict = DB_defaults.responses

    lp: dict =  DB_defaults.lp
    settings: dict = DB_defaults.settings


    def __init__(self, user_id: int = 0):
        if not user_id: user_id = db_gen.owner_id
        self.gen = db_gen
        self.duty_id = int(user_id)
        self.full_db = db_gen.general
        self.users = db_gen.users
        self.host = db_gen.host
        self.installed = db_gen.installed
        self.v_last = db_gen.v_last
        self.mode = db_gen.mode
        self.warnings =  db_gen.warnings
        self.vk_app_id = db_gen.vk_app_id
        self.vk_app_secret = db_gen.vk_app_secret
        self.load_user()



    def load_user(self):
        if not self.duty_id: self.duty_id = self.gen.owner_id
        user_db = read(str(self.duty_id))
        logger.debug(f'–ó–∞–≥—Ä—É–∑–∫–∞ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.duty_id}')
        if user_db: self.__dict__.update(user_db)
        else: raise ExcDB(0)


    def save(self) -> str:
        '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ DB'
        logger.debug("–°–æ—Ö—Ä–∞–Ω—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        with open(p.join(path, f'{str(self.duty_id)}.json'), "w", encoding="utf-8") as file:
            file.write(json.dumps(DB_defaults().load_user(self), ensure_ascii=False, indent = 4))
        return "ok"


DB_general().update_general# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞

